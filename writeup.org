#+TITLE: writeup
#+AUTHOR: Pierre Steen

Write-up and notes taken whilst working through the first assignment for =ELEC0134: Applied Machine Learning=.
Use these to guide the flow the report, whilst possibly converting these looser notes into a post on my personal website in future.

*Take care in detailing design decisions, the issues encountered and the approaches taken to solve them!*

* Introduction

Imaging based diagnosis in oncology offers the advantage of automated and non-intrusive detection of tumours, often much earlier than traditional diagnosis methods allow for.
Using relatively simple machine vision algorithms that leverage vast data sets, the goal of a medical classification algorithm is to minismise the numbers of misdiagnoses.
We can see how this can be phrased as an optimisation problem.

... (write more about machine-based medical diagnosis, use paper to back up points made!)

* Building a Tumour Classification Algorithm

I am going to use the [[https://julialang.org/][julia]] programming language for this.
Not only is it my favourite language, it also has a quite beautiful and composable machine learning ecosystem.
Libraries like [[https://fluxml.ai/][Flux]] and those under the [[https://github.com/SciML][SciML]] umbrella leverage the built-in differentiability of julia code to offer lightning-fast automatic differentiation.
This greatly benefits ML workflows and makes defining learning problems almost intuitive.

(Love letter over, let's do some programming.)

** Data Wrangling

The aim of our data wrangling scripts will be to perform some /io/ operations, interfacing with the database, cleaning and arranging the data into a shape which allows for the a system to tested, trained and validated on.

*** Analysis of Requirements

**** Question 1:

What data do we have at our disposal and what work needs to be done to get it into a malleable form?

**** Answer:

Ok. We have a CSV file in the ~data~ directory; ~label.csv~, which contains a database of ~file_name~-~label~ pairs.
These are the labelled outputs for each of the 3000 brain scan images, labelled: ~IMAGE_0000.jpg~ to ~IMAGE_2999.jpg~, stored in the ~data/image~ directory.

**** Question 2:

Since we want to implement both:
 - a binary classifier (i.e. cancer/no cancer)
 - a general classifier (labelled output)
how should we transform our data?

**** Answer:

We can split our answer into the two target outcomes.
First however; we read ~label.csv~ into IO using the ~CSV.jl~ library, then pipe IO into a ~DataFrame~ data type (a tabular structure provided by ~DataFrames.jl~):

#+BEGIN_SRC julia
raw = CSV.File("data/label.csv") |> DataFrame
#+END_SRC

This produces:

#+BEGIN_SRC
julia> raw
3000×2 DataFrame
  Row │ file_name       label
      │ String15        String31
──────┼──────────────────────────────────
    1 │ IMAGE_0000.jpg  meningioma_tumor
    2 │ IMAGE_0001.jpg  no_tumor
    3 │ IMAGE_0002.jpg  meningioma_tumor
    4 │ IMAGE_0003.jpg  glioma_tumor
    5 │ IMAGE_0004.jpg  meningioma_tumor
    6 │ IMAGE_0005.jpg  meningioma_tumor
    7 │ IMAGE_0006.jpg  no_tumor
    8 │ IMAGE_0007.jpg  glioma_tumor
    9 │ IMAGE_0008.jpg  glioma_tumor
   10 │ IMAGE_0009.jpg  pituitary_tumor
  ⋮   │       ⋮                ⋮
 2991 │ IMAGE_2990.jpg  meningioma_tumor
 2992 │ IMAGE_2991.jpg  pituitary_tumor
 2993 │ IMAGE_2992.jpg  pituitary_tumor
 2994 │ IMAGE_2993.jpg  pituitary_tumor
 2995 │ IMAGE_2994.jpg  glioma_tumor
 2996 │ IMAGE_2995.jpg  no_tumor
 2997 │ IMAGE_2996.jpg  meningioma_tumor
 2998 │ IMAGE_2997.jpg  glioma_tumor
 2999 │ IMAGE_2998.jpg  glioma_tumor
 3000 │ IMAGE_2999.jpg  pituitary_tumor
                        2980 rows omitted
#+END_SRC


***** Binary Classifier

The labels from ~data/label.csv~ need to be converted to a ~Bool~ type, then joined to their corresponding input data to create an: ~(input => output)~ pair.

For this, we map an anonymous function to each element in ~raw.label~ (the output label strings):

#+BEGIN_SRC julia
raw.label = map(x -> x == "no_tumor" ? false : true,
                   raw.label)
#+END_SRC

What this achieves is the following:

#+BEGIN_SRC
julia> raw
3000×2 DataFrame
  Row │ file_name       label
      │ String15        Bool
──────┼───────────────────────
    1 │ IMAGE_0000.jpg   true
    2 │ IMAGE_0001.jpg  false
    3 │ IMAGE_0002.jpg   true
    4 │ IMAGE_0003.jpg   true
    5 │ IMAGE_0004.jpg   true
    6 │ IMAGE_0005.jpg   true
    7 │ IMAGE_0006.jpg  false
    8 │ IMAGE_0007.jpg   true
    9 │ IMAGE_0008.jpg   true
   10 │ IMAGE_0009.jpg   true
  ⋮   │       ⋮           ⋮
 2991 │ IMAGE_2990.jpg   true
 2992 │ IMAGE_2991.jpg   true
 2993 │ IMAGE_2992.jpg   true
 2994 │ IMAGE_2993.jpg   true
 2995 │ IMAGE_2994.jpg   true
 2996 │ IMAGE_2995.jpg  false
 2997 │ IMAGE_2996.jpg   true
 2998 │ IMAGE_2997.jpg   true
 2999 │ IMAGE_2998.jpg   true
 3000 │ IMAGE_2999.jpg   true
             2980 rows omitted
#+END_SRC
